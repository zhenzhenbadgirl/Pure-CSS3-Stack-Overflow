$box-color: #BCBBBB;
$stack-color: #F48024;
$main-background: #ffffff;

$stack-padding: 10px;

$box-size:  12px;
$box-width: 115px;
$box-height: $box-size * 3 + $stack-padding * 2;
$box-y: 100px;

$stack-height: $box-size;
$stack-arc-length: 100px;
$stack-arc-rotation: 12deg;
$stack-width: $box-width - 2*$box-size - 2*$stack-padding;

body{
  font-family: Arial,"Helvetica Neue",Helvetica,sans-serif;
  overflow: hidden;
  background: #fff;
}

.center{
  margin: 0px auto;    //  整体左右居中
}

.so{
  display: block;       //  logo整体的宽高背景色
  width: 500px;
  height: $box-y + $box-height;
  background: $main-background;

  .inner{                       
    width: 500px;
    height: $box-y + $box-height;
    position: absolute;         //为文字定位做准备

    *{
      position: absolute;
      animation-iteration-count: infinite;      //直接设置循环次数，数字
      animation-duration: 3.5s;                      //动画总时间：3.5秒
    }

    .name{                                  //右边文字的位置、大小
      position: absolute;
      font-size: 54px;
      left: 130px;
      top: $box-y - 5px;

      .b{
        font-weight: bold;
      }
    }

    .stack-box{                             //灰色、橙色整体，动效部分
      top: $box-y;
      width: $box-width;
      height: $box-height;
    }

    .box{                                   //灰色盒子
      width: $box-width;                    
      height: $box-height;
      left: 0px;

      div{                                  //灰色盒子四个边
        background: $box-color;
      }

      .bottom{
        bottom: 0px;
        left: 0px;
        width: $box-width;
        height: $box-size;
      }

      .left{
        bottom: $box-size - 1px;
        left: 0px;
        width: $box-size;
        height: $box-height - $box-size * 2 + 2px;
      }

      .right{
        bottom: $box-size - 1px;
        left: $box-width - $box-size;
        width: $box-size;
        height: $box-height - $box-size * 2 + 2px;
      }

      .top{
        top: 0px;
        left: 0px;
        //width: $box-width;
        width: 0;
        height: $box-size;
      }
    }

    .stack{                                          //橙色条的集合
      left: $box-size + $stack-padding;
      top: $box-height - $box-size - $stack-padding - $stack-height;

      .inner-item{                                   //每个橙色的条
        background: $stack-color;

        width: $box-width - 2*$box-size - 2*$stack-padding;
        height: $stack-height;
      }

      .item{
        //transition: transform 10s;                     //多余
        width: $box-width - 2*$box-size - 2*$stack-padding + 220px;     //220px!!!
      }
      
      @for $i from 0 through 4 {
        div:nth-child(#{$i+1}){                         //1-5的item类的旋转角度，动画开始之前，呈扇形摆放
          transform: rotate(#{$i * $stack-arc-rotation}) ;
        }
      }
    }
  }

  .inner{
    //$total-time: 2s;

    .box{                //对应@keyframes box
      animation-name: box;

      .top{              //对应@keyframes box-top
        animation-name: box-top;
      }

      .left{             //对应@keyframes box-left
        animation-name: box-left;
      }

      .right{            //对应@keyframes box-right
        animation-name: box-right;
      }

      .bottom{          //对应@keyframes box-bottom
        animation-name: box-bottom;
      }
    }

    .stack-box{         //对应@keyframes stack-box
      animation-name: stack-box;
    }

    .stack{             //对应@keyframes stack
      animation-name: stack;

      .inner-item{      //对应@keyframes stack-items
        animation-name: stack-items;
      }
      
      @for $i from 1 through 5 {    //对应@keyframes stack-item-#{$i}5; 扇形合拢
        .item:nth-child(#{$i}){
          animation-name: stack-item-#{$i};
        }
      }
    }
  }

  $folded-padding: 30px;

  @keyframes stack{                 //缩小成一点的同时左边距离增加，形成缩小到中心点的感觉
    0%   { left: $box-size + $stack-padding; }   //给加个边框看起来更清晰
    15%   { left: $box-size + $stack-padding; }
    30%   { left: $box-size + $stack-padding + $folded-padding; }
    50%   { left: $box-size + $stack-padding + $folded-padding; }
    80%   { left: $box-size + $stack-padding; }
  }

  @for $i from 0 through 4 {        //一开始的扇形合拢和最后的展开
    @keyframes stack-item-#{$i+1} {
      // 0%   { transform: rotate($stack-arc-rotation * #{$i}); }
      10% { transform: rotate(0deg); }
      50% { transform: rotate(0deg); }
      54% { transform: rotate(0deg); }
      92%   { transform: rotate($stack-arc-rotation * #{$i}); }
    }
  }

  @keyframes stack-items{           //宽度变小的同时，宽度也变小，集中到中心点
    0%   { width: $stack-width;}
    15%   { width: $stack-width;}
    30%   { width: $stack-height;}
    50%   { width: $stack-height;}
    80%   { width: $stack-width;}
  }

  @keyframes box{                   //灰色的长方形box变成正方形的时候距离左边距离增大
    0%   { left: 0; }
    15%   { left: 0; }
    30%   { left: $folded-padding; }
    50%   { left: $folded-padding; }
    80%   { left: 0; }
  }

  @keyframes box-top{               //顶部的边长度变化
    0%   { width: 0; }
    6%   { width: 0; }
    15%   { width: $box-width; }
    30%   { width: $box-size * 2 + $stack-padding * 2 + $stack-height; }
    50%   { width: $box-size * 2 + $stack-padding * 2 + $stack-height; }
    59%   { width: 0; }
  }

  @keyframes box-left{
    15%   { }
    30%   { }
    40%   { }
    50%   { }
  }

  @keyframes box-bottom{              //底部的边长度变化，和顶部类似，也就是灰色盒子的长度
    0%   { width: $box-width; }
    15%   { width: $box-width; }
    30%   { width: $box-size * 2 + $stack-padding * 2 + $stack-height; }
    50%   { width: $box-size * 2 + $stack-padding * 2 + $stack-height; }
    80%   { width: $box-width; }
  }

  @keyframes box-right{               //长度变化的同时，调整左边距离，就像两边同时缩到中心一点
    15%   { left: $box-width - $box-size; }
    30%   { left: $box-size * 2 + $stack-padding * 2; }
    50%   { left: $box-size * 2 + $stack-padding * 2;  }
    80%   { left: $box-width - $box-size; }
  }

  @keyframes stack-box{                //盒子和条整体的旋转动效
    0%   { transform: rotate(0deg); }
    30%   { transform: rotate(0deg); }
    40%   { transform: rotate(135deg); }
    50%   { transform: rotate(135deg); }
    83%   { transform: rotate(360deg); }
    100%   { transform: rotate(360deg); }
  }
}